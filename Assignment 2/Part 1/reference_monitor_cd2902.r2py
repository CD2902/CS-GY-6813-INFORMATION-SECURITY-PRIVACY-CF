"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
	SG: Edited from code originally submitted
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
	def __init__(self,filename,create):
		# globals
		mycontext['debug'] = False   
		# local (per object) reference to the underlying file
		self.Afn = filename+'.a'
		self.Bfn = filename+'.b'
		initalString = "SE"

    # make the files and add 'SE' to the readat file...
	# Creating Back Up if one of the files is not there and recreate a back up if A file is not there.
		if create:
			if self.Afn in listfiles():
				self.Bfile = openfile(self.Bfn,create)
				self.Afile = openfile(self.Afn,create)
				self.Bfile.writeat(self.Afile.readat(None,0),0)
			elif self.Bfn in listfiles():
				self.Afile = openfile(self.Afn,create)
				self.Bfile = openfile(self.Bfn,create)
				self.Afile.writeat(self.Bfile.readat(None,0),0)
			else:
				self.Afile = openfile(self.Afn,create)
				self.Bfile = openfile(self.Bfn,create)
				self.Afile.writeat(initalString,0)
				self.Bfile.writeat(self.Afile.readat(None,0),0)
		self.Afile.lock = createlock()
		self.Bfile.lock = createlock()

#Testing Variables			
#		self.Afile.lock = createlock()
#		self.Bfile.lock = createlock()
#		lockedA = self.Afile.lock.acquire(True)
#		lockedB = self.Bfile.lock.acquire(True)
#		unlockA = self.Afile.lock.release()
#		unlockB = self.Bfile.lock.release()
			
			
	def writeat(self,data,offset):
	    # Write the requested data to the B file using the sandbox's writeat call
		# Create a lock to the bfile for write out safety
		self.Bfile.lock.acquire(True)
		self.Bfile.writeat(data,offset)
		self.Bfile.lock.release()
  
	def readat(self,bytes,offset):
	#Create a lock to the class for read safety
		self.lock=createlock()
		self.lock.acquire(True)
		self.lock.release()
		return self.Afile.readat(bytes,offset)
		

		
	def close(self):
		# IF the B file (writing file) has valadation rule then A will write from B
		self.Afile.lock.acquire(True)
		self.Bfile.lock.acquire(True)
		if self.Bfile.readat(None,0).startswith("S") and self.Bfile.readat(None,0).endswith("E"):
			self.Afile.writeat(self.Bfile.readat(None,0),0)
			self.Afile.close()
			self.Bfile.close()
			self.Afile.lock.release()
			self.Bfile.lock.release()
		else:
			self.Afile.close()
			self.Bfile.close()	
			removefile(self.Afn)
			removefile(self.Bfn)

def ABopenfile(filename, create):
	return ABFile(filename,create)

sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close} 
				}
				

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

secure_dispatch_module()


		
